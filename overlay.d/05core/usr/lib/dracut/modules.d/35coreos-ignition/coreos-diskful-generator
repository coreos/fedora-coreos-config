#!/bin/bash
# -*- mode: shell-script; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# ex: ts=8 sw=4 sts=4 et filetype=sh

# Originally this was known as 'ignition-generator' found in ignition-dracut.
# With Ignition v 2.5.0, ignition-dracut was merged into Ignition and the CoreOS
# specific bits were deposited here.

set -e

# Generators don't have logging right now
# https://github.com/systemd/systemd/issues/15638
exec 1>/dev/kmsg; exec 2>&1

UNIT_DIR="${1:-/tmp}"

IFS=" " read -r -a cmdline <<< "$(</proc/cmdline)"
cmdline_arg() {
    local name="$1" value="$2"
    for arg in "${cmdline[@]}"; do
        if [[ "${arg%%=*}" == "${name}" ]]; then
            value="${arg#*=}"
        fi
    done
    echo "${value}"
}

cmdline_bool() {
    local value=$(cmdline_arg "$@")
    case "$value" in
        ""|0|no|off) return 1;;
        *) return 0;;
    esac
}

add_requires() {
    local name="$1"; shift
    local target="$1"; shift
    local requires_dir="${UNIT_DIR}/${target}.requires"
    mkdir -p "${requires_dir}"
    ln -sf "../${name}" "${requires_dir}/${name}"
}

# If this is a live image then exit early.
if is-live-image; then
    exit 0
fi

# Generate a sysroot.mount unit. We can't do this later by dynamically
# doing the mount like we used to because systemd 254+ will drop units that
# require sysroot.mount from the transaction:
# https://github.com/coreos/fedora-coreos-tracker/issues/1527#issuecomment-1656786452
#
# We'll dynamically pick up what mount options to use from the OPTIONS
# environment variable in /run/coreos-rootflags (generated by
# coreos-rootflags.service).
#
# Note that for new machines this is *only* useful on first boot because
# coreos-boot-edit.service will add the root= and rootflags= kargs to the
# kernel command line for subsequent boots. However we haven't migrated
# all old machines so there are still some that could exist that don't
# have root= and rootflags= kargs. For that reason we run this bit of
# code on EVERY diskful boot.
mkdir -p ${UNIT_DIR}
# We want to generate sysroot.mount on ostree systems, but we don't want
# to run if there's already a root= karg, where the systemd-fstab-generator
# should win.
# We also don't want to generate sysroot.mount if we are booting a kdump kernel
# that aims to upload logs to a remote target, as the XFS kernel module won't be loaded
# https://issues.redhat.com/browse/OCPBUGS-27935
# FIXME: this kdump case should be removed when we are done with https://github.com/coreos/fedora-coreos-tracker/issues/1675
if test -n "$(cmdline_arg ostree)" && test -z "$(cmdline_arg root)" && test -z "$(cmdline_arg kdump_remote_ip)"; then
    cat >${UNIT_DIR}/sysroot.mount << 'EOF'
[Unit]
Before=initrd-root-fs.target
After=coreos-rootflags.service
[Mount]
EnvironmentFile=/run/coreos-rootflags
What=/dev/disk/by-label/root
Where=/sysroot
Options=${OPTIONS}
EOF
    add_requires sysroot.mount initrd-root-fs.target
    add_requires coreos-rootflags.service initrd-root-fs.target
fi

if ! $(cmdline_bool 'ignition.firstboot' 0); then
    exit 0
fi

# coreos-ignition-setup-user.service should depend on the boot device node
# only on diskful boots
mkdir -p "${UNIT_DIR}/coreos-ignition-setup-user.service.d"
cat > "${UNIT_DIR}/coreos-ignition-setup-user.service.d/diskful.conf" <<EOF
[Unit]
Requires=dev-disk-by\x2dlabel-boot.device
After=dev-disk-by\x2dlabel-boot.device

Requires=coreos-gpt-setup.service
After=coreos-gpt-setup.service
EOF

# create symlink for udev rule
mkdir -p /run/udev/rules.d/
ln -sf /usr/lib/coreos/80-coreos-boot-disk.rules \
      /run/udev/rules.d/80-coreos-boot-disk.rules

# IBM Secure Execution case
# During firstboot we have to reencrypt '/boot' and '/', to do that an Ignition config
# is injected. 'coreos-boot-disk' is required for this
secure_execution=0
if [[ $(uname -m) == s390x ]] && [[ -e /sys/firmware/uv/prot_virt_guest ]]; then
    secure_execution=$(cat /sys/firmware/uv/prot_virt_guest)
fi
if [[ "${secure_execution}" = "1" ]]; then
    mkdir -p /run/coreos/
    touch /run/coreos/secure-execution
    cp /usr/lib/coreos/01-secex.ign /usr/lib/ignition/base.d/01-secex.ign
    # Add dropins to disable Ignition logging for all stages
    stages=("fetch-offline" "fetch" "kargs" "disks" "mount" "files")
    for s in "${stages[@]}"; do
        dropin="${UNIT_DIR}/ignition-${s}.service.d"
        mkdir -p "${dropin}"
        cat > "${dropin}/10-secex.conf" <<EOF
[Service]
Environment=IGNITION_ARGS=-log-to-stdout
StandardOutput=null
StandardError=null
EOF
    done
fi
