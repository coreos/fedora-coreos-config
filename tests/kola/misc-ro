#!/bin/bash
# This is a place to put random quick read-only tests.
set -xeuo pipefail

ok() {
    echo "ok" "$@"
}

fatal() {
    echo "$@" >&2
    exit 1
}

on_platform() {
    grep -q " ignition.platform.id=$1 " /proc/cmdline
}

get_journal_msg_timestamp() {
    journalctl -o json -b 0 --grep "$1" \
        | jq -r --slurp '.[0]["__MONOTONIC_TIMESTAMP"]'
}

# Test some services are enabled or disabled appropriately
for unit in logrotate; do
    if ! systemctl is-enabled ${unit} 1>/dev/null; then
        fatal "Unit ${unit} should be enabled"
    fi
done
# systemd-resolved should be disabled on f32 but
# enabled on f33+.
source /etc/os-release
if systemctl is-enabled systemd-resolved 1>/dev/null; then
    if [ "$VERSION_ID" == "32" ]; then
        fatal "Unit ${unit} should not be enabled"
    fi
else
    if [ "$VERSION_ID" != "32" ]; then
        fatal "Unit ${unit} should be enabled"
    fi
fi
ok services

# https://github.com/coreos/fedora-coreos-config/commit/2a5c2abc796ac645d705700bf445b50d4cda8f5f
if ip link | grep -o -e " eth[0-9]:"; then
    fatal "detected eth* NIC naming on node"
fi
ok nic naming

if test -w /sysroot; then
    fatal "found writable /sysroot"
fi
ok sysroot ro

if ! lsattr -d / | grep -qe '--i--'; then
    fatal "missing immutable bit on /"
fi
ok immutable bit

# See remove-files in the manifest
if test -d /usr/share/info; then
    fatal "found /usr/share/info"
fi

switchroot_ts=$(get_journal_msg_timestamp 'Switching root.')
nm_ts=$(get_journal_msg_timestamp 'NetworkManager .* starting')
# by default, kola on QEMU shouldn't need to bring up networking
# https://github.com/coreos/fedora-coreos-config/pull/426
if [[ $nm_ts -lt $switchroot_ts ]] && on_platform qemu; then
    fatal "NetworkManager started in initramfs!"
# and as a sanity-check that this test works, verify that on AWS
# we did bring up networking in the initrd
elif [[ $nm_ts -gt $switchroot_ts ]] && on_platform aws; then
    fatal "NetworkManager not started in initramfs!"
fi
ok conditional initrd networking

if ! test -f /usr/share/licenses/fedora-coreos-config/LICENSE; then
    fatal missing LICENSE
fi
ok LICENSE

case "$(arch)" in
    x86_64|aarch64)
        if runuser -u core -- ls /boot/efi &>/dev/null; then
            fatal "Was able to access /boot/efi as non-root"
        fi
        if systemctl is-enabled bootupd.socket; then
            fatal "Not expecting bootupd.socket to be enabled"
        fi
        # This is just a basic sanity check; at some point we
        # will implement "project-owned tests run in the pipeline"
        # and be able to run the existing bootupd tests.
        systemctl start bootupd.socket
        bootupctl status
        ok bootupctl
        ;;
esac

# check that no files are unlabeled
unlabeled=$(find /var /etc -context '*:unlabeled_t:*')
if [ -n "${unlabeled}" ]; then
    echo "Found unlabeled files:"
    echo "${unlabeled}"
    exit 1
fi
ok no files with unlabeled_t SELinux label

# make sure we stick with bdb until we're ready to move to sqlite
# https://github.com/coreos/fedora-coreos-tracker/issues/623
if [ ! -f /usr/share/rpm/Packages ]; then
    fatal "Didn't find bdb file /usr/share/rpm/Packages"
fi
ok rpmdb is bdb
